#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Command line script for loading elements as Minerva entities.
"""
__docformat__ = "restructuredtext en"

__copyright__ = """
Copyright (C) 2008-2013 Hendrikx-ITC B.V.

Distributed under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3, or (at your option) any later
version.  The full license is in the file COPYING, distributed as part of
this software.
"""
import os
import argparse
import logging
from contextlib import closing
from pkg_resources import resource_string
from StringIO import StringIO

from configobj import ConfigObj

from minerva import __version__ as version
from minerva.instance import MinervaInstance
from minerva.directory.helpers_v4 import dns_to_entity_ids

CONFIG_DEFAULTS = resource_string("minerva", "defaults/load-elements.conf")


def main():
    """
    Script entry point.
    """
    default_minerva_instance = os.environ.get(
        "DEFAULT_MINERVA_INSTANCE", "default")

    parser = argparse.ArgumentParser()

    parser.add_argument(
        "--version", action="version", version=version,
        help="display version information and exit")

    parser.add_argument(
        "-i", "--instance", default=default_minerva_instance,
        help="name of the target minerva instance")

    parser.add_argument(
        "-u", "--user", default="minerva_admin",
        help="user to connect to database")

    parser.add_argument(
        "-c", "--configfile", default="/etc/minerva/load-elements.conf",
        help="Config file")

    parser.add_argument(
        "-v", "--verbose", action="store_true",
        default=False, help="Show verbose output")

    parser.add_argument("source", metavar="SOURCE", nargs="+")

    args = parser.parse_args()

    if args.verbose:
        root_logger = logging.getLogger("")
        root_logger.setLevel(logging.INFO)

    minerva_instance = MinervaInstance.load(args.instance)

    config = ConfigObj(StringIO(CONFIG_DEFAULTS))
    config.merge(ConfigObj(args.configfile))

    user = (
        args.user
        or config.get("database", {}).get("user")
        or "minerva_admin")

    with closing(minerva_instance.connect(user=user)) as conn:
        for source_file in args.source:
            lines = read_dns_file(source_file)

            distinguished_names = [line.rstrip("\n").rstrip("\r")
                                   for line in lines]

            with closing(conn.cursor()) as cursor:
                dns_to_entity_ids(cursor, distinguished_names)

        conn.commit()


def read_dns_file(file_path):
    with open(file_path, "r") as dns_file:
        return dns_file.readlines()


if __name__ == "__main__":
    main()
