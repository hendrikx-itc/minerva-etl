#!/usr/bin/python
"""Command line tool materialize attribute current 'pointer' view."""
import os
import argparse
from contextlib import closing

from minerva.util import head
from minerva.instance import MinervaInstance


def main():
    """Script entrypoint."""
    default_instance_name = os.environ.get("DEFAULT_MINERVA_INSTANCE",
                                           "default")

    parser = argparse.ArgumentParser(
        description="Materialize attribute current pointer views.")

    parser.add_argument(
        "-i", "--instance", default=default_instance_name,
        help="name of the target minerva instance")

    parser.add_argument(
        "-u", "--user", default="minerva_admin",
        help="user to connect to database")

    args = parser.parse_args()

    minerva_instance = MinervaInstance.load(args.instance)

    with closing(minerva_instance.connect(user=args.user)) as conn:
        materialize_changed(conn)


def materialize_changed(conn):
    query = (
        "SELECT mod.attributestore_id "
        "FROM attribute_directory.attributestore_modified mod "
        "LEFT JOIN attribute_directory.attributestore_curr_materialized mat "
        "ON mod.attributestore_id = mat.attributestore_id "
        "WHERE mat.materialized <> mod.modified")

    with closing(conn.cursor()) as cursor:
        cursor.execute(query)

        attributestore_ids = map(head, cursor.fetchall())

    for attributestore_id in attributestore_ids:
        materialize(cursor, attributestore_id)

        conn.commit()

        print("materialized {}".format(attributestore_id))


def materialize(cursor, attributestore_id):
    query = (
        "SELECT attribute_directory.materialize_curr_ptr(%s)"
    )

    args = (attributestore_id,)

    cursor.execute(query, args)


if __name__ == "__main__":
    main()
