#!/usr/bin/python
"""
Create attribute tags
"""
import sys
import argparse
import traceback
import logging
from contextlib import closing
from operator import itemgetter
from pkg_resources import resource_string

from configobj import ConfigObj

from minerva.db import connect
from minerva.directory.tag import get_tag, create_tag, NoSuchTagError, \
    create_tag_group

from minerva.storage.attribute.tag import tag_attributes, flush_tag_links

CONFIG_DEFAULTS = resource_string("minerva", "defaults/link-attribute-tags.conf")


def main():
    parser = argparse.ArgumentParser(
        description="Create tags for attributes")

    parser.add_argument("-t", "--tag-type",
                        help="name of module containing tag type definition")

    parser.add_argument("-c", "--configfile", dest="configfile",
                        default="/etc/minerva/link-attribute-tags.conf",
                        help="path to config file")

    parser.add_argument("-v", "--verbose", action="store_true", default=False,
                        help="verbose output")

    parser.add_argument("-f", "--flush", action="store_true", default=False,
                        help="flush current attribute tags of specified type")

    parser.add_argument("--generate-configfile", dest="generate_configfile",
                        default=False, action="store_true",
                        help="generate base config file")

    args = parser.parse_args()

    if args.generate_configfile:
        sys.stdout.write(CONFIG_DEFAULTS)
        return 0

    config = ConfigObj(args.configfile)

    setup_logging(args.verbose)

    sys.path.append(config["module_directory"])

    module = __import__(args.tag_type)

    try:
        with closing(connect(config["db_url"])) as conn:
            link(conn, module, args.flush)
    except Exception:
        traceback.print_exc()
        return 1

    return 0


def link(conn, module, flush):
    """
    Link attributs and tags
    """
    tag_links = module.get_tag_links(conn)

    count = len(tag_links)

    get_tag_name = itemgetter(1)

    tag_names = set(map(get_tag_name, tag_links))

    for tag_name in tag_names:
        try:
            get_tag(conn, tag_name)
        except NoSuchTagError:
            tag_group = create_tag_group(
                conn, module.GROUP_NAME, module.COMPLEMENTARY)
            create_tag(conn, tag_name, tag_group)
        else:
            if flush:
                logging.info("flushing tags '{}'".format(tag_name))

                flush_tag_links(conn, tag_name)

    logging.info("storing {} tags".format(count))

    tag_attributes(conn, tag_links)


def setup_logging(verbose):
    root_logger = logging.getLogger("")

    if verbose:
        handler = logging.StreamHandler(sys.stdout)

        root_logger.addHandler(handler)

    root_logger.setLevel(logging.INFO)


if __name__ == "__main__":
    sys.exit(main())
