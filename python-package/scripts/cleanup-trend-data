#!/usr/bin/env python
# -*- coding: utf-8 -*-
__docformat__ = "restructuredtext en"

__copyright__ = """
Copyright (C) 2008-2013 Hendrikx-ITC B.V.

Distributed under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3, or (at your option) any later
version.  The full license is in the file COPYING, distributed as part of
this software.
"""
import os
import sys
import argparse
import logging
from contextlib import closing

from minerva.instance import MinervaInstance
from minerva.util.config import get_defaults


package_name = "minerva"
script_name = os.path.basename(__file__)
config_file = "{}.conf".format(script_name)


def main():
    config_file_path = os.path.join("/etc/minerva", config_file)

    parser = argparse.ArgumentParser(description="Cleanup trend data")

    parser.add_argument(
        "-c", "--configfile", dest="configfile",
        default=config_file_path, help="the path to the config file")

    parser.add_argument(
        "-i", "--instance",
        help="name of the target minerva instance")

    parser.add_argument("-u", "--user", help="user to connect to database")

    parser.add_argument(
        "-v", "--verbose", action="store_true", default=False,
        help="verbose output")

    parser.add_argument(
        "--pretend", action="store_true", default=False,
        help="don't really delete partitions")

    parser.add_argument(
        "-g", "--granularity", default="900",
        help="granularity of trendstores to clean")

    parser.add_argument(
        "-d", "--datasource", help="datasource of trendstores to clean")

    parser.add_argument(
        "-e", "--entitytype", help="entitytype of trendstores to clean")

    parser.add_argument(
        "-a", "--age", default="14 days",
        help="minimum age of partitions to remove")

    parser.add_argument(
        "--generate-configfile", dest="generate_configfile",
        action=GenerateConfigFileAction, nargs=0,
        help="generate base config file")

    args = parser.parse_args()

    logging.root.addHandler(logging.StreamHandler(sys.stdout))

    if args.verbose:
        logging.root.setLevel(logging.INFO)

    minerva_instance_name = (
        args.instance or
        os.environ.get("MINERVA_INSTANCE") or
        "default"
    )

    minerva_instance = MinervaInstance.load(minerva_instance_name)

    joins = []
    select_args = []

    if args.datasource:
        joins.append(
            "JOIN directory.datasource "
            "ON datasource.id = ts.datasource_id "
            "AND datasource.name = %s")

        select_args.append(args.datasource)

    if args.entitytype:
        joins.append(
            "JOIN directory.entitytype "
            "ON entitytype.id = ts.entitytype_id "
            "AND entitytype.name = %s")

        select_args.append(args.entitytype)

    select_query = (
        "SELECT table_name, data_start, data_end "
        "FROM trend.partition p "
        "JOIN trend.trendstore ts ON ts.id = p.trendstore_id {}"
        "WHERE ts.granularity = %s AND data_end < now() - interval %s "
        "ORDER BY data_end, table_name").format("".join(joins))

    select_args.extend((args.granularity, args.age))

    delete_query = (
        "DELETE FROM trend.partition "
        "WHERE table_name = %s")

    user = args.user or "minerva_admin"

    with closing(minerva_instance.connect(user=user)) as conn:
        with closing(conn.cursor()) as cursor:
            cursor.execute(select_query, select_args)

            for table_name, start, end in cursor.fetchall():
                if not args.pretend:
                    cursor.execute(delete_query, (table_name,))
                    conn.commit()
                logging.info("dropped table {}, {} - {}".format(
                    table_name, start, end))

    return 0


class GenerateConfigFileAction(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        sys.stdout.write(get_defaults(package_name, config_file))
        sys.exit(0)


if __name__ == "__main__":
    main()
