#!/usr/bin/env python
# -*- coding: utf-8 -*-
__docformat__ = "restructuredtext en"

__copyright__ = """
Copyright (C) 2008-2013 Hendrikx-ITC B.V.

Distributed under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3, or (at your option) any later
version.  The full license is in the file COPYING, distributed as part of
this software.
"""
import os
import sys
import argparse
import logging
from contextlib import closing
from functools import partial

import psycopg2.extras

from minerva import __version__ as version
from minerva.db import parse_db_url
from minerva.util.config import load_config, get_defaults, ConfigError

from minerva.storage.trend.types_v4 import View
from minerva.storage.trend.trendstore import TrendStore


package_name = "minerva"
script_name = os.path.basename(__file__)
config_file = "{}.conf".format(script_name)


def main():
    config_file_path = os.path.join("/etc/minerva", config_file)

    parser = argparse.ArgumentParser(description="Backup Views")

    parser.add_argument(
        "--version", action="version", version=version,
        help="display version information and exit")

    parser.add_argument(
        "-c", "--configfile", dest="configfile",
        default=config_file_path, help="the path to the config file")

    parser.add_argument(
        "-v", "--verbose", action="store_true", default=False,
        help="verbose output")

    parser.add_argument(
        "--generate-configfile", dest="generate_configfile",
        action=GenerateConfigFileAction, nargs=0,
        help="generate base config file")

    root_logger = logging.getLogger("")
    handler = logging.StreamHandler(sys.stdout)
    root_logger.addHandler(handler)

    args = parser.parse_args()

    try:
        config = load_config(get_defaults(package_name, config_file),
                             args.configfile)
    except ConfigError as exc:
        logging.error("error loading configuration: {}".format(exc))
        return 1

    if args.verbose:
        root_logger.setLevel(logging.DEBUG)

        create_connection = partial(connect, config["db_uri"], root_logger)
    else:
        root_logger.setLevel(logging.INFO)

        create_connection = partial(connect, config["db_uri"])

    with closing(create_connection()) as conn:
        with closing(conn.cursor()) as cursor:
            views = View.load_all(cursor)

            for view in views:
                print(view)
                trendstore = TrendStore.get_by_id(cursor, view.trendstore_id)

                define_view_query = (
                    "INSERT INTO trend.view (trendstore_id, description, sql)\n"
                    "VALUES (\n"
                    "\t(trend.attributes_to_view_trendstore('{}', '{}', '{}')).id,\n"
                    "\t'{}',\n"
                    "\t'{}'\n"
                    ");\n"
                ).format(trendstore.datasource.name,
                         trendstore.entitytype.name, trendstore.granularity,
                         view.description, view.sql.replace("\r\n", "\n"))

                file_path = "{}.sql".format(trendstore.make_table_basename())

                with open(file_path, 'w') as view_backup:
                    view_backup.write(define_view_query)

                    for source_id in view.sources:
                        source_trendstore = TrendStore.get_by_id(cursor,
                                                                 source_id)

                        define_view_source_query = (
                            "\n"
                            "INSERT INTO trend.view_trendstore_link (view_id, trendstore_id)\n"
                                "\tSELECT view.id, (trend.attributes_to_trendstore('{0.datasource.name}', '{0.entitytype.name}', '{0.granularity.name}')).id\n"
                                "\tFROM trend.view\n"
                                "\tWHERE trendstore_id = (trend.get_trendstore_by_attributes('{1.datasource.name}', '{1.entitytype.name}', '{1.granularity.name}')).id;\n").format(source_trendstore, trendstore)

                        view_backup.write(define_view_source_query)

    return 0


def connect(db_url, logger=None):
    scheme, user, password, host, port, database = parse_db_url(db_url)

    assert scheme == "postgresql", "Only PostgreSQL connections are supported"

    create_connection = partial(
        psycopg2.connect, database=database, user=user,
        password=password, host=host, port=port)

    if logger:
        conn = create_connection(
            connection_factory=psycopg2.extras.LoggingConnection)

        conn.initialize(logger)
    else:
        conn = create_connection()

    return conn


class GenerateConfigFileAction(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        sys.stdout.write(get_defaults(package_name, config_file))
        sys.exit(0)


if __name__ == "__main__":
    main()
