#!/usr/bin/python
"""Query Minerva entities using tags, aliases and relations."""
import sys
import os
import argparse
import logging
from contextlib import closing
import json
from functools import partial

import psycopg2

from minerva import __version__ as version
from minerva.db import parse_db_url
from minerva.db.util import render_result
from minerva.directory.query import compile_sql, get_entitytags_by_query
from minerva.util import unlines
from minerva.instance import MinervaInstance

package_name = "minerva"
script_name = os.path.basename(__file__)
config_file = "{}.conf".format(script_name)


def main():
    parser = setup_args_parser()

    args = parser.parse_args()

    minerva_instance = MinervaInstance.load(
        args.instance or
        os.environ.get('MINERVA_INSTANCE') or
        'default'
    )

    user = (
        args.user or
        'minerva_admin'
    )

    query = args.query[0]

    #query_part, query_args, entity_id_column = compile_sql(query, 'AWACS')

    if args.debug:
        logging.root.setLevel(logging.DEBUG)
        logging.root.addHandler(logging.StreamHandler(sys.stdout))

        connect = partial(minerva_instance.connect_logging, logging.root,
                          user=user)
    else:
        connect = partial(minerva_instance.connect, user=user)

    with closing(connect()) as conn:
        with closing(conn.cursor()) as cursor:

            #query = (
            #    "SELECT etl.tag_id "
            #    "{0} "
            #    "JOIN directory.entitytaglink etl ON etl.entity_id = {1} "
            #    "GROUP BY etl.tag_id"
            #).format(query_part, entity_id_column)

            #query = "SELECT * {}".format(select)
            #print(cursor.mogrify(query, query_args))

            tag_ids = get_entitytags_by_query(cursor, query, 'AWACS')

            print(tag_ids)

            #select.execute(cursor, select_args)

            #print(unlines(render_result(cursor)))

    return 0


def setup_args_parser():
    parser = argparse.ArgumentParser(description="query Minerva entities")

    parser.add_argument(
        "-i", "--instance", help="name of the target minerva instance")

    parser.add_argument(
        "--version", action="version", version=version,
        help="display version information and exit")

    parser.add_argument(
        "-u", "--user", help="user to connect to database")

    parser.add_argument(
        "--limit", dest="limit", type=int, help="limit the number of results")

    parser.add_argument(
        "--debug", action="store_true", default=False, help="debug logging")

    parser.add_argument("query", nargs=1, type=json.loads)

    return parser


if __name__ == "__main__":
    sys.exit(main())
