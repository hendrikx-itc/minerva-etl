#!/usr/bin/python
"""Command line tool for cleaning up data without a matching entity."""
import os
import argparse
from contextlib import closing

from minerva.util import head
from minerva.instance import MinervaInstance
from minerva.storage.attribute.attributestore import AttributeStore


def main():
    """Script entrypoint."""
    default_instance_name = os.environ.get("DEFAULT_MINERVA_INSTANCE",
                                           "default")

    parser = argparse.ArgumentParser(
        description="Remove data without valid matching entity.")

    parser.add_argument(
        "-i", "--instance", default=default_instance_name,
        help="name of the target minerva instance")

    parser.add_argument(
        "-u", "--user", default="minerva_admin",
        help="user to connect to database")

    parser.add_argument(
        "-a", "--all", action="store_true", default=False,
        help="materialize all current pointer tables")

    parser.add_argument(
        "-p", "--pretend", action="store_true", default=False,
        help="only show what would be deleted without the pretend option")

    args = parser.parse_args()

    minerva_instance = MinervaInstance.load(args.instance)

    with closing(minerva_instance.connect(user=args.user)) as conn:
        with closing(conn.cursor()) as cursor:
            attributestores = AttributeStore.get_all(cursor)

            for attributestore in attributestores:
                cleanup_attributestore(cursor, attributestore)

                if args.pretend:
                    conn.rollback()
                else:
                    conn.commit()


def cleanup_attributestore(cursor, attributestore):
    query = (
        'DELETE FROM attribute_history."{}" '
        'WHERE NOT EXISTS (SELECT 1 FROM directory.entity WHERE id = entity_id); '
    ).format(attributestore.table_name())

    cursor.execute(query)

    count = cursor.rowcount

    print("{} - {}".format(attributestore.table_name(), count))


if __name__ == "__main__":
    main()