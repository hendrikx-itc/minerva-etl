#!/bin/bash

set -e
set -o pipefail

VERBOSE=
USER="postgres"

while getopts â€œhvu: OPTION
do
	case $OPTION in
		h)
			usage
			exit 1
			;;
		v)
			VERBOSE=1
			;;
		u)
			USER=$OPTARG
			;;
		?)
			usage
			exit
			;;
	esac
done

shift $(($OPTIND - 1))

INSTANCE=$1
INSTANCE_CONF_FILE="/etc/minerva/instances/$1.conf"

function get_conf_value()
{
	local filepath=$1
	local name=$2

	grep -e "^$name\s*=.*" $filepath | sed -re "s/^$name\s*=\s*(.*)/\1/g"
}

DATABASE=$(get_conf_value "$INSTANCE_CONF_FILE" "name")
HOST=$(get_conf_value "$INSTANCE_CONF_FILE" "host")

export PGHOST="$HOST"
export PGUSER="$USER"

log()
{
	local message=$1

	if [ $VERBOSE ]; then
		echo $message
	fi
}

function invoke_psql()
{
	psql --no-psqlrc --set ON_ERROR_STOP=1 "$@"
}

runsqlscript()
{
	local filepath=$1

	if [ $VERBOSE ]; then
		invoke_psql $DATABASE --file $filepath
	else
		invoke_psql $DATABASE --file $filepath 2>&1 > /dev/null
	fi
}

runsql()
{
	local sql=$1

	if [ $VERBOSE ]; then
		invoke_psql $DATABASE --command "$sql"
	else
		invoke_psql $DATABASE --command "$sql" 2>&1 > /dev/null
	fi
}

runsqlscript /usr/share/postgresql/9.1/contrib/postgis-1.5/postgis.sql
runsqlscript /usr/share/postgresql/9.1/contrib/postgis-1.5/spatial_ref_sys.sql

runsql "GRANT SELECT ON public.geometry_columns TO minerva;"
runsql "GRANT SELECT ON public.spatial_ref_sys TO minerva;"
