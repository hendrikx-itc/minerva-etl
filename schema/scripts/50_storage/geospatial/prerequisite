#!/bin/bash

set -e
set -o pipefail

VERBOSE=
USER=postgres

while getopts :vu: OPTION
do
	case $OPTION in
		v)
			VERBOSE=1
			;;
		u)
			USER=$OPTARG
			;;
		?)
			echo $0: unrecognized option: $OPTARG
			exit 1
			;;
	esac
done

shift $(($OPTIND - 1))

INSTANCE=$1
INSTANCE_CONF_FILE="/etc/minerva/instances/$1.conf"

function get_conf_value()
{
	local filepath=$1
	local name=$2

	grep -e "^$name\s*=.*" $filepath | sed -re "s/^$name\s*=\s*(.*)/\1/g"
}

DATABASE=$(get_conf_value "$INSTANCE_CONF_FILE" "name")
HOST=$(get_conf_value "$INSTANCE_CONF_FILE" "host")

export PGHOST="$HOST"
export PGUSER="$USER"

log()
{
	local message="$@"

	if [[ $VERBOSE == 1 ]]; then
		echo "$message"
	fi
}

function invoke_psql()
{
	psql --no-psqlrc --set ON_ERROR_STOP=1 "$@"
}

runsqlscript()
{
	local filepath=$1

	if [[ "$VERBOSE" == 1 ]]; then
		invoke_psql $DATABASE --file $filepath
	else
		invoke_psql $DATABASE --file $filepath 2>&1 > /dev/null
	fi
}

runsql()
{
	local sql=$1

	if [[ "$VERBOSE" == 1 ]]; then
		invoke_psql $DATABASE --command "$sql"
	else
		invoke_psql $DATABASE --command "$sql" 2>&1 > /dev/null
	fi
}

runsql 'CREATE EXTENSION IF NOT EXISTS postgis'
runsql 'GRANT SELECT ON public.geometry_columns TO PUBLIC'
runsql 'GRANT SELECT ON public.spatial_ref_sys TO PUBLIC'

# Postgis before version 2.0
#POSTGIS_PATH=$(find $(pg_config --sharedir)/contrib -maxdepth 1 -name 'postgis*' -type d)
#runsqlscript "$POSTGIS_PATH/postgis.sql"
#runsqlscript "$POSTGIS_PATH/spatial_ref_sys.sql"
