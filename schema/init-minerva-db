#!/bin/bash

set -e
set -o pipefail

usage()
{
cat << EOF
usage: $0 options [database]

Initialize a Minerva database with installed modules.

OPTIONS:
   -h           Show this message
   -v           Verbose
   -d           Drop database first
   -u USER      Name of database user to use for connection (default: 'postgres')
   -i INSTANCE  Name of Minerva instance to use (default: 'default')
EOF
}

VERBOSE=
DROP=
USER=postgres
INSTANCE=default

while getopts :hvdu:i: OPTION
do
	case $OPTION in
		h)
			usage
			exit
			;;
		v)
			VERBOSE=1
			;;
		d)
			DROP=1
			;;
		u)
			USER=$OPTARG
			;;
		i)
			INSTANCE=$OPTARG
			;;
		?)
			echo $0: unrecognized option: $OPTARG
			echo Try \'$0 -h\' for more information.
			exit 1
			;;
	esac
done

shift $(($OPTIND - 1))

INSTANCE_CONF_FILE="/etc/minerva/instances/$INSTANCE.conf"

function get_conf_value()
{
	local filepath=$1
	local name=$2

	grep -e "^$name\s*=.*" $filepath | sed -re "s/^$name\s*=\s*(.*)/\1/g"
}

DATABASE=$(get_conf_value "$INSTANCE_CONF_FILE" "name")
HOST=$(get_conf_value "$INSTANCE_CONF_FILE" "host")

export PGHOST="$HOST"
export PGUSER="$USER"

function main()
{
	log "resetting Minerva database '$DATABASE'"
	if [[ $(db_exists $DATABASE) = 1 ]]; then
		if [[ "$DROP" != 1 ]]; then
			echo "database '$DATABASE' already exists, specify '-d' to first drop the database"
			exit 1
		fi
		runsql "DROP DATABASE $DATABASE"
	fi

	runsql "CREATE DATABASE $DATABASE"

	log "roles"
	exec_module_scripts "/usr/share/minerva"
	log "public functions and casts"
	exec_module_scripts "/usr/share/minerva/public"
	log "directory schema"
	exec_module_scripts "/usr/share/minerva/directory"
	log "system schema"
	exec_module_scripts "/usr/share/minerva/system"

	log "set timezone"
	runsql_in_database "SELECT system.set_setting('default_timezone', '$(timezone)');"

	log "relation schema"
	exec_module_scripts "/usr/share/minerva/relation"
	log "dimension schema"
	exec_module_scripts "/usr/share/minerva/dimension"
	log "storage plugins"
	exec_module_scripts "/usr/share/minerva/storage/attribute"
	exec_module_scripts "/usr/share/minerva/storage/trend"
	exec_module_scripts "/usr/share/minerva/storage/notification"
	exec_module_scripts "/usr/share/minerva/storage/geospatial"
	log "extensions"
	exec_nested_module_scripts "/usr/share/minerva/extensions"

	log "done"
}

function timezone()
{
	if [[ -f /etc/timezone ]]; then
		cat /etc/timezone
	elif [[ -h /etc/localtime ]]; then
		readlink /etc/localtime | sed s-/usr/share/zoneinfo/--
	else
		echo UTC
	fi
}

function invoke_psql()
{
	psql --no-psqlrc --set ON_ERROR_STOP=1 "$@"
}

function log()
{
	local message="$@"

	if [[ $VERBOSE ]]; then
		echo "$message"
	fi
}

function runsqlscript()
{
	local filepath=$1

	if [[ $VERBOSE ]]; then
		invoke_psql $DATABASE --file $filepath --single-transaction
	else
		invoke_psql $DATABASE --file $filepath --single-transaction > /dev/null
	fi
}

function runsql()
{
	local command="$@"

	if [[ $VERBOSE ]]; then
		invoke_psql --command "$command"
	else
		invoke_psql --command "$command" > /dev/null
	fi
}

function runsql_in_database()
{
	local command=$1

	if [[ $VERBOSE ]]; then
		invoke_psql --command "$command" $DATABASE
	else
		invoke_psql --command "$command" $DATABASE > /dev/null
	fi
}

function db_exists()
{
	# Return 1 if database exists, otherwise return 0.
	local name=$1
	invoke_psql -c '' $name 2>/dev/null && echo 1 || echo 0
}

function exec_nested_module_scripts()
{
	local root=$1

	dirnames=$(find ${root} -mindepth 1 -maxdepth 1 -type d)

	for modulepath in $dirnames; do
		log "storage plugin $modulepath"
		exec_module_scripts $modulepath
	done
}

function exec_module_scripts()
{
	local module_path=$1

	if [[ -f $module_path/prerequisite ]]
	then
		if [[ $VERBOSE ]]; then
			bash $module_path/prerequisite -v $INSTANCE
		else
			bash $module_path/prerequisite $INSTANCE
		fi
	fi

	scripts=$(find $module_path -maxdepth 1 -type f -name '*.sql' | sort)

	for script in $scripts; do
		runsqlscript $script
	done
}

main
