#!/usr/bin/env python
"""
Dump Minerva configuration
"""
import os
import sys
import argparse
from contextlib import closing
from functools import partial

from minerva import __version__ as version
from minerva.instance import MinervaInstance
from minerva.storage.trend import TableTrendStore


def main():
    parser = argparse.ArgumentParser(
        description="Create tags between entities"
    )

    parser.add_argument(
        "--version", action="version", version=version,
        help="display version information and exit"
    )

    parser.add_argument("-i", "--instance", help="name of the minerva instance")

    parser.add_argument("-u", "--user", help="user to connect to database")

    parser.add_argument(
        "-v", "--verbose", action="store_true", default=False,
        help="verbose output"
    )

    parser.add_argument(
        "--exclude-materialized", action="store_true", default=False,
        help="exclude trend stores that are populated by materialization"
    )

    args = parser.parse_args()

    minerva_instance = MinervaInstance.load(
        args.instance or
        os.environ.get("DEFAULT_MINERVA_INSTANCE") or
        "default"
    )

    with closing(minerva_instance.connect(user=args.user)) as conn:
        lines = dump(
            conn,
            partial(table_trend_store_query, args.exclude_materialized)
        )

        for line in lines:
            print(line)


def table_trend_store_query(exclude_materialized):
    query = (
        "SELECT \n"
        "    table_trend_store.*\n"
        "FROM trend_directory.table_trend_store\n"
        "JOIN directory.data_source ON\n"
        "    data_source.id = table_trend_store.data_source_id\n"
        "JOIN directory.entity_type ON\n"
        "    entity_type.id = table_trend_store.entity_type_id\n"
    )

    if exclude_materialized:
        query += (
            "LEFT JOIN materialization.type ON\n"
            "    type.table_trend_store_id = table_trend_store.id\n"
            "    AND\n"
            "    type.id IS NULL\n"
        )

    query += (
        "ORDER BY data_source.name, entity_type.name, table_trend_store.granularity\n"
    )

    return query


def attribute_store_query():
    return (
        "SELECT attribute_store.id, data_source.name, entity_type.name\n"
        "FROM attribute_directory.attribute_store\n"
        "JOIN directory.data_source ON\n"
        "    data_source.id = attribute_store.data_source_id\n"
        "JOIN directory.entity_type ON\n"
        "    entity_type.id = attribute_store.entity_type_id\n"
        "ORDER BY data_source.name, entity_type.name"
    )


def dump(conn, table_trend_store_query):
    with closing(conn.cursor()) as cursor:
        cursor.execute(table_trend_store_query())

        table_trend_stores = [
            TableTrendStore.from_record(record)(cursor)
            for record in cursor.fetchall()
        ]

        for table_trend_store in table_trend_stores:

            yield "SELECT trend_directory.create_table_trend_store("
            yield "    '{}',".format(table_trend_store.data_source.name)
            yield "    '{}',".format(table_trend_store.entity_type.name)
            yield "    '{}',".format(table_trend_store.granularity)
            yield "    ARRAY["
            yield ",\n".join(
                "        ('{}', '{}', '{}')".format(
                    trend.name,
                    trend.data_type.name,
                    trend.description
                )
                for trend in table_trend_store.trends
            )
            yield "    ]::trend_directory.trend_descr[]"
            yield ");"
            yield ""

        cursor.execute(attribute_store_query())

        attribute_stores = cursor.fetchall()

        for id_, data_source_name, entity_type_name in attribute_stores:
            yield "SELECT attribute_directory.create_attribute_store("
            yield "    '{}',".format(data_source_name)
            yield "    '{}',".format(entity_type_name)
            yield "    ARRAY["

            cursor.execute(
                "SELECT name, data_type, description\n"
                "FROM attribute_directory.attribute\n"
                "WHERE attribute_store_id = %s",
                (id_,)
            )

            yield ",\n".join(
                "        ({}, {}, {})".format(
                    format_str(attribute_name),
                    format_str(data_type),
                    format_str(description)
                )
                for attribute_name, data_type, description in cursor.fetchall()
            )

            yield "    ]::attribute_directory.attribute_descr[]"
            yield ");"
            yield ""


def format_str(value):
    if value is None:
        return 'NULL'
    else:
        return "'{}'".format(value)


if __name__ == "__main__":
    sys.exit(main())
