#!/usr/bin/python
"""
Dump Minerva configuration
"""
import os
import sys
import argparse
from contextlib import closing
from operator import itemgetter
from functools import partial

from minerva import __version__ as version
from minerva.instance import MinervaInstance


def main():
    default_minerva_instance = os.environ.get("DEFAULT_MINERVA_INSTANCE")

    parser = argparse.ArgumentParser(
        description="Create tags between entities")

    parser.add_argument(
        "--version", action="version", version=version,
        help="display version information and exit")

    parser.add_argument("-i", "--instance", help="name of the minerva instance")

    parser.add_argument("-u", "--user", help="user to connect to database")

    parser.add_argument(
        "-v", "--verbose", action="store_true", default=False,
        help="verbose output")

    parser.add_argument(
        "--exclude-materialized", action="store_true", default=False,
        help="exclude trendstores that are populated by materialization")

    args = parser.parse_args()

    minerva_instance = MinervaInstance.load(
        args.instance or
        default_minerva_instance or
        "default"
    )

    user = (
        args.user or
        "minerva_admin"
    )

    with closing(minerva_instance.connect(user=user)) as conn:
        for line in dump(conn, partial(trendstore_query, args.exclude_materialized)):
            print(line)


def trendstore_query(exclude_materialized):
    query = (
        "SELECT trendstore.id, datasource.name, entitytype.name, trendstore.granularity "
        "FROM trend.trendstore "
        "JOIN directory.datasource ON datasource.id = trendstore.datasource_id "
        "JOIN directory.entitytype ON entitytype.id = trendstore.entitytype_id "
    )

    if exclude_materialized:
        query += "LEFT JOIN materialization.type ON type.dst_trendstore_id = trendstore.id AND type.id IS NULL "

    query += (
        "WHERE trendstore.type = 'table' "
        "ORDER BY datasource.name, entitytype.name, trendstore.granularity"
    )

    return query


def attributestore_query():
    return (
        "SELECT attributestore.id, datasource.name, entitytype.name "
        "FROM attribute_directory.attributestore "
        "JOIN directory.datasource ON datasource.id = attributestore.datasource_id "
        "JOIN directory.entitytype ON entitytype.id = attributestore.entitytype_id "
        "ORDER BY datasource.name, entitytype.name"
    )


def dump(conn, trendstore_query):
    with closing(conn.cursor()) as cursor:
        cursor.execute(trendstore_query())

        trendstores = cursor.fetchall()

        for id, datasource_name, entitytype_name, granularity in trendstores:

            yield "SELECT trend.create_trendstore("
            yield "    '{}',".format(datasource_name)
            yield "    '{}',".format(entitytype_name)
            yield "    '{}',".format(granularity)
            yield "    ARRAY["
            cursor.execute("SELECT * FROM trend.show_trends(%s)", (id,))
            trends = cursor.fetchall()
            yield ",\n".join("        ('{}', '{}', '{}')".format(trend_name, datatype, description) for trend_name, datatype, description in trends)
            yield "    ]::trend.trend_descr[]"
            yield ");"
            yield ""

        cursor.execute(attributestore_query())

        attributestores = cursor.fetchall()

        for id, datasource_name, entitytype_name in attributestores:
            yield "SELECT attribute_directory.create_attributestore("
            yield "    '{}',".format(datasource_name)
            yield "    '{}',".format(entitytype_name)
            yield "    ARRAY["

            cursor.execute("SELECT name, datatype, description FROM attribute_directory.attribute WHERE attributestore_id = %s", (id,))

            yield ",\n".join("        ({}, {}, {})".format(format_str(attribute_name), format_str(datatype), format_str(description)) for attribute_name, datatype, description in cursor.fetchall())

            yield "    ]::attribute_directory.attribute_descr[]"
            yield ");"
            yield ""


def format_str(value):
    if value is None:
        return 'NULL'
    else:
        return "'{}'".format(value)


if __name__ == "__main__":
    sys.exit(main())
