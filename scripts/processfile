#!/usr/bin/env python
# -*- coding: utf-8 -*-
import sys
import logging
import json
import argparse
from contextlib import contextmanager
from contextlib import closing
from operator import itemgetter
import re

from minerva.util import compose, k
from minerva.instance import connect
from minerva.directory import DataSource
import minerva.storage.trend.datapackage
import minerva.storage.attribute.datapackage

from minerva.harvest.fileprocessor import process_file
from minerva.harvest.plugins import iter_entry_points, \
    get_plugin as get_harvest_plugin


package_name = "minerva_harvesting"


def main():
    args = create_argparser().parse_args()

    if args.debug:
        logging.root.setLevel(logging.DEBUG)

    if args.verbose:
        logging.root.addHandler(logging.StreamHandler())

    statistics = Statistics()

    parser = args.plugin.create_parser(args.parser_config)

    if args.store:
        store_cmd = parser.store_command()

        @contextmanager
        def store_db_context():
            with closing(connect()) as conn:
                with closing(conn.cursor()) as cursor:
                    data_source = DataSource.get_by_name(
                        args.data_source
                    )(cursor)

                if data_source is None:
                    raise Exception(
                        'No such data source {}'.format(args.data_source)
                    )

                def store_package(package):
                    store_cmd(package)(data_source)(conn)

                yield store_package

        storage_provider = store_db_context
    else:
        storage_provider = store_dummy

    with storage_provider() as store:
        handle_package = compose(
            store,
            tee(lambda package: print(package.render_table()))
        )

        for file_path in args.file_path:
            if args.verbose:
                logging.info("Processing {0}".format(file_path))

            logging.info(
                "Start processing file {0} using plugin {1}"
                " and config {2}".format(
                    file_path, args.plugin, args.parser_config
                )
            )

            process_file(
                file_path, parser, handle_package,
                args.show_progress
            )

    if args.statistics:
        for line in statistics.report():
            logging.info(line)


def create_argparser():
    parser = argparse.ArgumentParser(description="Script for processing files")

    parser.add_argument(
        "file_path", nargs="*",
        help="path of file that will be processed"
    )

    parser.add_argument(
        "-p", "--plugin", action=_LoadHarvestPlugin,
        help="harvester plug-in to use for processing file(s)"
    )

    parser.add_argument(
        "-l", "--list-plugins", action=_ListPlugins,
        help="list installed Harvester plug-ins")

    parser.add_argument(
        "--parser-config", default="{}", type=json.loads,
        help="parser specific configuration"
    )

    parser.add_argument(
        "--store", action="store_true", default=False,
        help="write data to database"
    )

    parser.add_argument(
        "--show-progress", action="store_true",
        dest="show_progress", default=False, help="show progressbar"
    )

    parser.add_argument(
        "-v", "--verbose", action="store_true", dest="verbose",
        default=False, help="produce verbose output"
    )

    parser.add_argument(
        "--debug", action="store_true", dest="debug",
        default=False, help="produce debug output"
    )

    parser.add_argument(
        "--dn-filter", type=create_regex_filter, default=k(True),
        help="filter by distinguished name"
    )

    parser.add_argument(
        "--column-filter", type=create_regex_filter,
        default=k(True), help="filter by trend name"
    )

    parser.add_argument(
        "--data-source", default="processfile", help="data source to use"
    )

    parser.add_argument(
        "--statistics", action="store_true", dest="statistics", default=False,
        help="show statistics like number of packages, entities, etc."
    )

    return parser


def create_regex_filter(x):
    if x:
        return re.compile(x).match
    else:
        return k(True)


class Statistics(object):
    def __init__(self):
        self.package_count = 0

    def extract_statistics(self, package):
        self.package_count += 1

        return package

    def report(self):
        return [
            "{} packages".format(self.package_count)
        ]


def filter_trend_package(entity_filter, trend_filter, package):
    filtered_trend_names = filter(trend_filter, package.trend_names)

    trend_filter_map = map(trend_filter, package.trend_names)

    filter_rows = compose(entity_filter, itemgetter(0))

    entity_filtered_rows = filter(filter_rows, package.rows)

    filtered_rows = []

    for row in entity_filtered_rows:
        values = row[-1]

        trend_filtered_values = [
            v
            for include, v in
            zip(trend_filter_map, values)
            if include
        ]

        trend_filtered_row = tuple(row[:-1]) + (trend_filtered_values,)

        filtered_rows.append(trend_filtered_row)

    return minerva.storage.trend.datapackage.DefaultPackage(
        package.granularity, package.timestamp, filtered_trend_names,
        filtered_rows
    )


def filter_attribute_package(entity_filter, attribute_filter, package):
    filtered_attribute_names = filter(attribute_filter, package.attribute_names)

    attribute_filter_map = map(attribute_filter, package.attribute_names)

    filter_rows = compose(entity_filter, itemgetter(0))

    entity_filtered_rows = filter(filter_rows, package.rows)

    filtered_rows = []

    for row in entity_filtered_rows:
        values = row[-1]

        attribute_filtered_values = [
            v
            for include, v in
            zip(attribute_filter_map, values)
            if include
        ]

        attribute_filtered_row = row[:-1] + (attribute_filtered_values,)

        filtered_rows.append(attribute_filtered_row)

    return minerva.storage.attribute.datapackage.DataPackage(
        filtered_attribute_names,
        filtered_rows)


package_data_filters = {
    "trend": filter_trend_package,
    "attribute": filter_attribute_package
}


def tee(fn):
    def wrapper(x):
        fn(x)

        return x

    return wrapper


class _ListPlugins(argparse.Action):
    def __init__(self, option_strings, dest=argparse.SUPPRESS,
                 default=argparse.SUPPRESS, help=None):
        super(_ListPlugins, self).__init__(
            option_strings=option_strings, dest=dest, default=default, nargs=0,
            help=help
        )

    def __call__(self, parser, namespace, values, option_string=None):
        for entry_point in iter_entry_points():
            print(entry_point.name)

        sys.exit(0)


class _LoadHarvestPlugin(argparse.Action):
    def __init__(self, option_strings, dest=argparse.SUPPRESS,
                 default=argparse.SUPPRESS, help=None):
        super(_LoadHarvestPlugin, self).__init__(
            option_strings=option_strings, dest=dest, default=default,
            nargs=1, help=help
        )

    def __call__(self, parser, namespace, values, option_string=None):
        plugin_name = values[0]

        plugin = get_harvest_plugin(plugin_name)

        if plugin is None:
            print("Data type '{0}' not supported".format(plugin_name))
            sys.exit(1)

        setattr(namespace, self.dest, plugin)


@contextmanager
def store_dummy():
    yield no_op


def no_op(*args, **kwargs):
    pass


if __name__ == "__main__":
    main()
