#!/usr/bin/env python
# -*- coding: utf-8 -*-
__docformat__ = "restructuredtext en"

__copyright__ = """
Copyright (C) 2008-2013 Hendrikx-ITC B.V.

Distributed under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3, or (at your option) any later
version.  The full license is in the file COPYING, distributed as part of
this software.
"""
import os
import sys
import argparse
import logging
from contextlib import closing

from minerva import __version__ as version
from minerva.util.config import load_config, get_defaults, ConfigError
from minerva.instance import MinervaInstance
from minerva.storage import get_plugin
from minerva.storage.geospatial.types import Site, Cell, Point


package_name = "minerva"
script_name = os.path.basename(__file__)
config_file = "{}.conf".format(script_name)


def main():
    default_minerva_instance = os.environ.get(
        "DEFAULT_MINERVA_INSTANCE", "default")

    config_file_path = os.path.join("/etc/minerva", config_file)

    parser = argparse.ArgumentParser(
        description="Populate GIS Site/Cell tables from configuration data")

    parser.add_argument(
        "--version", action="version", version=version,
        help="display version information and exit")

    parser.add_argument(
        "-i", "--instance", default=default_minerva_instance,
        help="name of the target minerva instance")

    parser.add_argument("-u", "--user", help="user to connect to database")

    parser.add_argument(
        "-c", "--configfile", dest="configfile", default=config_file_path,
        help="the path to the config file")

    parser.add_argument(
        "-v", "--verbose", action="store_true", default=False,
        help="verbose output")

    parser.add_argument(
        "-d", "--debug", action="store_true", default=False,
        help="debug output")

    parser.add_argument(
        "--generate-configfile", dest="generate_configfile",
        action=GenerateConfigFileAction, nargs=0,
        help="generate base config file")

    args = parser.parse_args()

    try:
        config = load_config(get_defaults(package_name, config_file),
                             args.configfile)
    except ConfigError as exc:
        print("error loading configuration: {}".format(exc))
        return 1

    minerva_instance = MinervaInstance.load(args.instance)
    user = (args.user or config.get("database", {}).get("user")
        or "minerva_admin")

    if args.verbose or args.debug:
        if args.debug:
            setup_logging(logging.DEBUG)
        else:
            setup_logging(logging.INFO)

    with closing(minerva_instance.connect(user=user)) as conn:
        with closing(conn.cursor()) as cursor:
            sites = get_sites(cursor)
            cells = get_cells(cursor)

        plugin = get_plugin("geospatial")(conn)

        plugin.store_sites(sites)
        plugin.store_cells(cells)

    return 0


def setup_logging(level):
    root_logger = logging.getLogger("")

    root_logger.addHandler(logging.StreamHandler())
    root_logger.setLevel(level)


def get_sites(cursor):
    query = (
        "SELECT entity_id, timestamp, x_lon, y_lat, srid "
        'FROM attribute."configuration_Site"')

    cursor.execute(query)

    rows = cursor.fetchall()

    return [(timestamp, Site(entity_id, Point(x, y, srid)))
            for entity_id, timestamp, x, y, srid in rows]


def get_cells(cursor):
    query = (
        "SELECT entity_id, timestamp, azimuth, type "
        'FROM attribute."configuration_Cell"')

    cursor.execute(query)

    rows = cursor.fetchall()

    return [(timestamp, Cell(entity_id, azimuth, type))
            for entity_id, timestamp, azimuth, type in rows]


class GenerateConfigFileAction(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        sys.stdout.write(get_defaults(package_name, config_file))
        sys.exit(0)


if __name__ == "__main__":
    main()
