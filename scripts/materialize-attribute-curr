#!/usr/bin/python2.7
"""Command line tool materialize attribute current 'pointer' view."""
import argparse
import os
from contextlib import closing

from minerva import __version__ as version
from minerva.util import head
from minerva.instance import MinervaInstance


def main():
    """Script entrypoint."""
    default_instance_name = os.environ.get("DEFAULT_MINERVA_INSTANCE",
                                           "default")

    parser = argparse.ArgumentParser(
        description="Materialize attribute current pointer views.")

    parser.add_argument(
        "--version", action="version", version=version,
        help="display version information and exit")

    parser.add_argument(
        "-i", "--instance", default=default_instance_name,
        help="name of the target minerva instance")

    parser.add_argument(
        "-u", "--user", default="minerva_admin",
        help="user to connect to database")

    parser.add_argument(
        "-a", "--all", action="store_true", default=False,
        help="materialize all current pointer tables")

    group = parser.add_mutually_exclusive_group()

    group.add_argument(
        "--include", action="append", help="include attribute store"
    )

    group.add_argument(
        "--exclude", action="append", help="exclude attribute store"
    )

    args = parser.parse_args()

    minerva_instance = MinervaInstance.load(args.instance)

    with closing(minerva_instance.connect(user=args.user)) as conn:
        with closing(conn.cursor()) as cursor:
            cursor.execute('set minerva.trigger_mark_modified = off')

            if args.all:
                attributestore_ids = get_all_attributestore_ids(cursor)
            elif args.include:
                attributestore_ids = get_include_attributestore_ids(
                    cursor, args.include
                )
            elif args.exclude:
                attributestore_ids = get_exclude_attributestore_ids(
                    cursor, args.exclude
                )
            else:
                attributestore_ids = get_changed_attributestore_ids(cursor)

        materialize_attributestores(conn, attributestore_ids)


def materialize_attributestores(conn, attributestore_ids):
    print("materializing {} changed attribute stores".format(len(attributestore_ids)))

    for attributestore_id in attributestore_ids:
        count, name = materialize(conn, attributestore_id)

        conn.commit()

        print("materialized {}: {}".format(name, count))


def materialize(conn, attributestore_id):
    with closing(conn.cursor()) as cursor:
        query = (
            "SELECT attribute_directory.materialize_curr_ptr(attributestore), attributestore::text "
            "FROM attribute_directory.attributestore "
            "WHERE id = %s"
        )

        args = (attributestore_id,)

        cursor.execute(query, args)

        return cursor.fetchone()


def get_all_attributestore_ids(cursor):
    """Return Ids of all attributestores."""
    cursor.execute("SELECT id FROM attribute_directory.attributestore")

    return map(head, cursor.fetchall())


def get_include_attributestore_ids(cursor, includes):
    cursor.execute(
        "SELECT id FROM attribute_directory.attributestore "
        "WHERE attributestore::text IN %s",
        includes
    )

    return map(head, cursor.fetchall())


def get_exclude_attributestore_ids(cursor, excludes):
    cursor.execute(
        "SELECT id FROM attribute_directory.attributestore "
        "WHERE attributestore::text NOT IN %s",
        excludes
    )

    return map(head, cursor.fetchall())


def get_changed_attributestore_ids(cursor):
    """Return Ids of all changed attributestores."""
    cursor.execute(
        "SELECT mod.attributestore_id "
        "FROM attribute_directory.attributestore_modified mod "
        "LEFT JOIN attribute_directory.attributestore_curr_materialized mat "
        "ON mod.attributestore_id = mat.attributestore_id "
        "WHERE mat.materialized <> mod.modified OR mat.materialized IS NULL")

    return map(head, cursor.fetchall())


if __name__ == "__main__":
    main()
