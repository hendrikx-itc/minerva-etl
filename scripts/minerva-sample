#!/usr/bin/env python
"""
Dump Minerva sample data
"""
import os
import sys
import argparse
from contextlib import closing
from functools import partial

from minerva import __version__ as version
from minerva.instance import MinervaInstance


def main():
    default_minerva_instance = os.environ.get("DEFAULT_MINERVA_INSTANCE")

    parser = argparse.ArgumentParser(
        description="Export sample data from Minerva database")

    parser.add_argument(
        "--version", action="version", version=version,
        help="display version information and exit")

    parser.add_argument("-i", "--instance", help="name of the minerva instance")

    parser.add_argument("-u", "--user", help="user to connect to database")

    parser.add_argument(
        "-v", "--verbose", action="store_true", default=False,
        help="verbose output")

    parser.add_argument(
        "--exclude-materialized", action="store_true", default=False,
        help="exclude materialized data")

    parser.add_argument(
        "--trendstore", nargs="*"
    )

    args = parser.parse_args()

    minerva_instance = MinervaInstance.load(
        args.instance or
        default_minerva_instance or
        "default"
    )

    user = (
        args.user or
        "minerva_admin"
    )

    with closing(minerva_instance.connect(user=user)) as conn:
        for line in dump(conn, partial(trendstore_query, args.trendstore, args.exclude_materialized)):
            print(line)


def trendstore_query(trendstores, exclude_materialized):
    query = (
        "SELECT trendstore.id, trend.to_base_table_name(trendstore) base_table_name, trend.staging_table_name(trendstore), datasource.name, entitytype.name, trendstore.granularity "
        "FROM trend.trendstore "
        "JOIN directory.datasource ON datasource.id = trendstore.datasource_id "
        "JOIN directory.entitytype ON entitytype.id = trendstore.entitytype_id "
    )

    if exclude_materialized:
        query += (
            "LEFT JOIN materialization.type "
            "ON type.dst_trendstore_id = trendstore.id AND type.id IS NULL "
        )

    query += (
        "WHERE trendstore.type = 'table' "
    )

    if trendstores:
        query += "AND trendstore::text IN ({}) ".format(
            ','.join("'{}'".format(trendstore) for trendstore in trendstores)
        )

    query += (
        "ORDER BY base_table_name"
    )

    query += " LIMIT 3"

    return query


def attributestore_query():
    return (
        "SELECT attributestore.id, datasource.name, entitytype.name "
        "FROM attribute_directory.attributestore "
        "JOIN directory.datasource ON datasource.id = attributestore.datasource_id "
        "JOIN directory.entitytype ON entitytype.id = attributestore.entitytype_id "
        "ORDER BY datasource.name, entitytype.name"
    )


def dump(conn, trendstore_query):
    with closing(conn.cursor()) as cursor:
        cursor.execute(trendstore_query())

        trendstores = cursor.fetchall()

        for trendstore_id, table_name, staging_table_name, datasource_name, entitytype_name, granularity in trendstores:
            yield "BEGIN;"

            yield "INSERT INTO trend.{}(".format(staging_table_name)

            cursor.execute("SELECT * FROM trend.show_trends(%s)", (trendstore_id,))
            trends = cursor.fetchall()
            yield ",\n".join(
                '        "{}"'.format(trend_name)
                for trend_name, datatype, description in trends
            )

            yield ")"
            yield "VALUES"

            columns_part = ",".join(
                '"{}"'.format(trend_name)
                for trend_name, datatype, description in trends
            )

            literal_mappers = [AS_LITERAL.get(datatype) for trend_name, datatype, description in trends]

            query = (
                'SELECT {} '
                'FROM trend."{}" LIMIT 3'
            ).format(columns_part, table_name)

            cursor.execute(query)

            rows = cursor.fetchall()

            for row in rows:
                yield "("
                yield ",\n".join(literal_mapper(value) for literal_mapper, value in zip(literal_mappers, row))
                yield "),"

            yield ";"
            yield ""

            yield "SELECT "
            yield "    trend.transfer_staged(trendstore) "
            yield "FROM trend.trendstore "
            yield "WHERE trendstore::text = '{}';".format(table_name)

            yield "COMMIT;"
            yield ""


def format_str(value):
    if value is None:
        return 'NULL'
    else:
        return "'{}'".format(value)


AS_LITERAL = {
    'integer': str,
    'bigint': str,
    'interval': format_str,
    'numeric': str
}


if __name__ == "__main__":
    sys.exit(main())
