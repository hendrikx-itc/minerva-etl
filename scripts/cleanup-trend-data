#!/usr/bin/env python
# -*- coding: utf-8 -*-
import os
import sys
import argparse
import logging
from contextlib import closing

from minerva import __version__ as version
from minerva.instance import MinervaInstance


package_name = "minerva"
script_name = os.path.basename(__file__)


def main():
    parser = argparse.ArgumentParser(description="Cleanup trend data")

    parser.add_argument(
        "--version", action="version", version=version,
        help="display version information and exit")

    parser.add_argument(
        "-i", "--instance",
        help="name of the target minerva instance")

    parser.add_argument("-u", "--user", help="user to connect to database")

    parser.add_argument(
        "-v", "--verbose", action="store_true", default=False,
        help="verbose output")

    parser.add_argument(
        "--pretend", action="store_true", default=False,
        help="don't really delete partitions")

    parser.add_argument(
        "-g", "--granularity",
        help="granularity of trendstores to clean")

    parser.add_argument(
        "-d", "--datasource", help="datasource of trendstores to clean")

    parser.add_argument(
        "-e", "--entitytype", help="entitytype of trendstores to clean")

    args = parser.parse_args()

    logging.root.addHandler(logging.StreamHandler(sys.stdout))

    if args.verbose:
        logging.root.setLevel(logging.INFO)

    minerva_instance_name = (
        args.instance or
        os.environ.get("MINERVA_INSTANCE") or
        "default"
    )

    minerva_instance = MinervaInstance.load(minerva_instance_name)

    joins = []
    criteria = ["data_end < now() - ts.retention_period"]
    select_args = []

    if args.datasource:
        joins.append(
            "JOIN directory.datasource "
            "ON datasource.id = ts.datasource_id "
            "AND datasource.name = %s")

        select_args.append(args.datasource)

    if args.entitytype:
        joins.append(
            "JOIN directory.entitytype "
            "ON entitytype.id = ts.entitytype_id "
            "AND entitytype.name = %s")

        select_args.append(args.entitytype)

    if args.granularity:
        criteria.append("ts.granularity = %s")

    select_query = (
        "SELECT table_name, data_start, data_end "
        "FROM trend.partition p "
        "JOIN trend.trendstore ts ON ts.id = p.trendstore_id {}"
        "WHERE {} "
        "ORDER BY data_end, table_name").format("".join(joins), " AND ".join(criteria))

    select_args.append(args.granularity)

    delete_query = (
        "DELETE FROM trend.partition "
        "WHERE table_name = %s")

    user = args.user or "minerva_admin"

    with closing(minerva_instance.connect(user=user)) as conn:
        conn._con.autocommit = True
        with closing(conn.cursor()) as cursor:
            cursor.execute(select_query, select_args)

            for table_name, start, end in cursor.fetchall():
                if not args.pretend:
                    cursor.execute(delete_query, (table_name,))
                logging.info("dropped table {}, {} - {}".format(
                    table_name, start, end))


if __name__ == "__main__":
    main()
