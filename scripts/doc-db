#!/usr/bin/env python
from operator import itemgetter
from contextlib import closing
from itertools import chain

import psycopg2

from minerva.util.tabulate import render_rst_table


fst = itemgetter(0)


def unlines(lines):
    return "\n".join(lines)


def format_value(value):
    if value is None:
        return ''
    else:
        return value


def ljoin(sep, items):
    return reduce(lambda x, y: x + [sep] + y, items, [])


class Database(object):
    def __init__(self, name):
        self.name = name

    @staticmethod
    def load(conn, name):
        with closing(conn.cursor()) as cursor:
            query = (
                "SELECT nspname "
                "FROM pg_namespace "
                "WHERE nspname NOT IN ('pg_toast', 'pg_temp_1', 'pg_toast_temp_1', 'pg_catalog', 'public', 'information_schema')"
            )

            cursor.execute(query)

            schema_names = [name for name, in cursor.fetchall()]

        schemas = [Schema.load(conn, name) for name in schema_names]

        for schema in schemas:
            print(unlines(schema.to_rst()))

        return Database(name)


class Schema(object):
    def __init__(self, name):
        self.name = name
        self.tables = []
        self.views = []
        self.functions = []

    @staticmethod
    def load(conn, name):
        schema = Schema(name)

        schema.tables = Table.load_all(conn, name)

        return schema

    def to_rst(self):
        lines = [
            self.name,
            len(self.name) * '=',
            '',
            'Tables',
            '------',
            ''
        ]

        lines.extend(chain(ljoin('', (table.to_rst() for table in self.tables))))

        return lines


class Column(object):
    def __init__(self, name, type, description):
        self.name = name
        self.type = type
        self.description = description

    @staticmethod
    def load(conn, oid):
        query = (
            'SELECT attname '
            'FROM pg_attribute '
            'WHERE oid = %s'
        )

    @staticmethod
    def load_all(conn, table_oid):
        query = (
            'SELECT attname, format_type(atttypid, atttypmod), d.description '
            'FROM pg_class c '
            'JOIN pg_attribute a ON c.oid = a.attrelid '
            'LEFT JOIN pg_description d ON d.objoid = c.oid AND d.objsubid = a.attnum '
            'WHERE attnum > 0 AND c.oid = %s'
        )

        args = (table_oid,)

        with closing(conn.cursor()) as cursor:
            cursor.execute(query, args)

            return [Column(name, type, description) for name, type, description in cursor.fetchall()]


class Table(object):
    def __init__(self, name, columns, description):
        self.name = name
        self.columns = columns
        self.description = description

    @staticmethod
    def load(conn, oid):
        query = (
            "SELECT c.relname, d.description "
            "FROM pg_class c "
            "LEFT JOIN pg_description d ON d.objoid = c.oid AND d.objsubid = 0 "
            "WHERE c.oid = %s"
        )

        args = (oid,)

        with closing(conn.cursor()) as cursor:
            cursor.execute(query, args)

            (table_name, description) = cursor.fetchone()

        columns = Column.load_all(conn, oid)

        return Table(table_name, columns, description)

    @staticmethod
    def load_all(conn, schema_name):
        query = (
            "SELECT pg_class.oid "
            "FROM pg_class "
            "JOIN pg_namespace ON pg_namespace.oid = pg_class.relnamespace "
            "WHERE relkind = 'r' AND pg_namespace.nspname = %s"
        )

        args = (schema_name,)

        with closing(conn.cursor()) as cursor:
            cursor.execute(query, args)

            return [Table.load(conn, oid) for oid, in cursor.fetchall()]

    def to_rst(self):
        column_names = ["Name", "Type", "Description"]
        column_align = "<" * len(column_names) # Align all columns left
        column_sizes = ["max"] * len(column_names) # Size columns to max cell width

        return [
            self.name,
            len(self.name) * '-',
            '',
            format_value(self.description),
            ''
        ] + render_rst_table(
            column_names,
            column_align,
            column_sizes,
            [(column.name, column.type, column.description) for column in self.columns]
        )


def main():
    with closing(psycopg2.connect('')) as conn:
        Database.load(conn, 'minerva')


if __name__ == '__main__':
    main()
